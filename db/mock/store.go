// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joekings2k/logistics-eta/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/joekings2k/logistics-eta/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateRoute mocks base method.
func (m *MockStore) CreateRoute(arg0 context.Context, arg1 db.CreateRouteParams) (db.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", arg0, arg1)
	ret0, _ := ret[0].(db.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockStoreMockRecorder) CreateRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockStore)(nil).CreateRoute), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateVehicle mocks base method.
func (m *MockStore) CreateVehicle(arg0 context.Context, arg1 db.CreateVehicleParams) (db.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicle", arg0, arg1)
	ret0, _ := ret[0].(db.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicle indicates an expected call of CreateVehicle.
func (mr *MockStoreMockRecorder) CreateVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicle", reflect.TypeOf((*MockStore)(nil).CreateVehicle), arg0, arg1)
}

// DeleteRoute mocks base method.
func (m *MockStore) DeleteRoute(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockStoreMockRecorder) DeleteRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockStore)(nil).DeleteRoute), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteVehicle mocks base method.
func (m *MockStore) DeleteVehicle(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVehicle indicates an expected call of DeleteVehicle.
func (mr *MockStoreMockRecorder) DeleteVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicle", reflect.TypeOf((*MockStore)(nil).DeleteVehicle), arg0, arg1)
}

// GetRouteByID mocks base method.
func (m *MockStore) GetRouteByID(arg0 context.Context, arg1 uuid.UUID) (db.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteByID", arg0, arg1)
	ret0, _ := ret[0].(db.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteByID indicates an expected call of GetRouteByID.
func (mr *MockStoreMockRecorder) GetRouteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteByID", reflect.TypeOf((*MockStore)(nil).GetRouteByID), arg0, arg1)
}

// GetRoutesByDriverID mocks base method.
func (m *MockStore) GetRoutesByDriverID(arg0 context.Context, arg1 db.GetRoutesByDriverIDParams) ([]db.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesByDriverID", arg0, arg1)
	ret0, _ := ret[0].([]db.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutesByDriverID indicates an expected call of GetRoutesByDriverID.
func (mr *MockStoreMockRecorder) GetRoutesByDriverID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesByDriverID", reflect.TypeOf((*MockStore)(nil).GetRoutesByDriverID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetVehicleByID mocks base method.
func (m *MockStore) GetVehicleByID(arg0 context.Context, arg1 uuid.UUID) (db.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByID", arg0, arg1)
	ret0, _ := ret[0].(db.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByID indicates an expected call of GetVehicleByID.
func (mr *MockStoreMockRecorder) GetVehicleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByID", reflect.TypeOf((*MockStore)(nil).GetVehicleByID), arg0, arg1)
}

// GetVehicleByLicensePlate mocks base method.
func (m *MockStore) GetVehicleByLicensePlate(arg0 context.Context, arg1 string) (db.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByLicensePlate", arg0, arg1)
	ret0, _ := ret[0].(db.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByLicensePlate indicates an expected call of GetVehicleByLicensePlate.
func (mr *MockStoreMockRecorder) GetVehicleByLicensePlate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByLicensePlate", reflect.TypeOf((*MockStore)(nil).GetVehicleByLicensePlate), arg0, arg1)
}

// GetVehiclesByDriverID mocks base method.
func (m *MockStore) GetVehiclesByDriverID(arg0 context.Context, arg1 db.GetVehiclesByDriverIDParams) ([]db.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehiclesByDriverID", arg0, arg1)
	ret0, _ := ret[0].([]db.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehiclesByDriverID indicates an expected call of GetVehiclesByDriverID.
func (mr *MockStoreMockRecorder) GetVehiclesByDriverID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehiclesByDriverID", reflect.TypeOf((*MockStore)(nil).GetVehiclesByDriverID), arg0, arg1)
}

// ListRoutesByDriverAndStatus mocks base method.
func (m *MockStore) ListRoutesByDriverAndStatus(arg0 context.Context, arg1 db.ListRoutesByDriverAndStatusParams) ([]db.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesByDriverAndStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesByDriverAndStatus indicates an expected call of ListRoutesByDriverAndStatus.
func (mr *MockStoreMockRecorder) ListRoutesByDriverAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesByDriverAndStatus", reflect.TypeOf((*MockStore)(nil).ListRoutesByDriverAndStatus), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateRouteActualDuration mocks base method.
func (m *MockStore) UpdateRouteActualDuration(arg0 context.Context, arg1 db.UpdateRouteActualDurationParams) (db.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteActualDuration", arg0, arg1)
	ret0, _ := ret[0].(db.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteActualDuration indicates an expected call of UpdateRouteActualDuration.
func (mr *MockStoreMockRecorder) UpdateRouteActualDuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteActualDuration", reflect.TypeOf((*MockStore)(nil).UpdateRouteActualDuration), arg0, arg1)
}

// UpdateRouteStatus mocks base method.
func (m *MockStore) UpdateRouteStatus(arg0 context.Context, arg1 db.UpdateRouteStatusParams) (db.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteStatus indicates an expected call of UpdateRouteStatus.
func (mr *MockStoreMockRecorder) UpdateRouteStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteStatus", reflect.TypeOf((*MockStore)(nil).UpdateRouteStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPartial mocks base method.
func (m *MockStore) UpdateUserPartial(arg0 context.Context, arg1 db.UpdateUserPartialParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPartial", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPartial indicates an expected call of UpdateUserPartial.
func (mr *MockStoreMockRecorder) UpdateUserPartial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPartial", reflect.TypeOf((*MockStore)(nil).UpdateUserPartial), arg0, arg1)
}

// UpdateVehicle mocks base method.
func (m *MockStore) UpdateVehicle(arg0 context.Context, arg1 db.UpdateVehicleParams) (db.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicle", arg0, arg1)
	ret0, _ := ret[0].(db.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVehicle indicates an expected call of UpdateVehicle.
func (mr *MockStoreMockRecorder) UpdateVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicle", reflect.TypeOf((*MockStore)(nil).UpdateVehicle), arg0, arg1)
}
