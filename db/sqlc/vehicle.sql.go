// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: vehicle.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createVehicle = `-- name: CreateVehicle :one
INSERT INTO vehicles (id, driver_id, license_plate, model, image_url, capacity)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, driver_id, license_plate, model, image_url, capacity, created_at, updated_at
`

type CreateVehicleParams struct {
	ID           uuid.UUID      `json:"id"`
	DriverID     uuid.UUID      `json:"driver_id"`
	LicensePlate string         `json:"license_plate"`
	Model        sql.NullString `json:"model"`
	ImageUrl     sql.NullString `json:"image_url"`
	Capacity     sql.NullInt32  `json:"capacity"`
}

func (q *Queries) CreateVehicle(ctx context.Context, arg CreateVehicleParams) (Vehicle, error) {
	row := q.db.QueryRowContext(ctx, createVehicle,
		arg.ID,
		arg.DriverID,
		arg.LicensePlate,
		arg.Model,
		arg.ImageUrl,
		arg.Capacity,
	)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.LicensePlate,
		&i.Model,
		&i.ImageUrl,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVehicle = `-- name: DeleteVehicle :exec
DELETE FROM vehicles WHERE id = $1
`

func (q *Queries) DeleteVehicle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVehicle, id)
	return err
}

const getVehicleByID = `-- name: GetVehicleByID :one

SELECT id, driver_id, license_plate, model, image_url, capacity, created_at, updated_at FROM vehicles WHERE id = $1
`

// returns the created vehicle
func (q *Queries) GetVehicleByID(ctx context.Context, id uuid.UUID) (Vehicle, error) {
	row := q.db.QueryRowContext(ctx, getVehicleByID, id)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.LicensePlate,
		&i.Model,
		&i.ImageUrl,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVehicleByLicensePlate = `-- name: GetVehicleByLicensePlate :one
SELECT id, driver_id, license_plate, model, image_url, capacity, created_at, updated_at FROM vehicles WHERE license_plate = $1
`

func (q *Queries) GetVehicleByLicensePlate(ctx context.Context, licensePlate string) (Vehicle, error) {
	row := q.db.QueryRowContext(ctx, getVehicleByLicensePlate, licensePlate)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.LicensePlate,
		&i.Model,
		&i.ImageUrl,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVehiclesByDriverID = `-- name: GetVehiclesByDriverID :many
SELECT id, driver_id, license_plate, model, image_url, capacity, created_at, updated_at FROM vehicles WHERE driver_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetVehiclesByDriverIDParams struct {
	DriverID uuid.UUID `json:"driver_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) GetVehiclesByDriverID(ctx context.Context, arg GetVehiclesByDriverIDParams) ([]Vehicle, error) {
	rows, err := q.db.QueryContext(ctx, getVehiclesByDriverID, arg.DriverID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vehicle{}
	for rows.Next() {
		var i Vehicle
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.LicensePlate,
			&i.Model,
			&i.ImageUrl,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVehicle = `-- name: UpdateVehicle :one
UPDATE vehicles
SET 
    model = COALESCE($2, model),
    image_url = COALESCE($3, image_url),
    capacity = COALESCE($4, capacity),
    updated_at = NOW()
WHERE id = $1
RETURNING id, driver_id, license_plate, model, image_url, capacity, created_at, updated_at
`

type UpdateVehicleParams struct {
	ID       uuid.UUID      `json:"id"`
	Model    sql.NullString `json:"model"`
	ImageUrl sql.NullString `json:"image_url"`
	Capacity sql.NullInt32  `json:"capacity"`
}

func (q *Queries) UpdateVehicle(ctx context.Context, arg UpdateVehicleParams) (Vehicle, error) {
	row := q.db.QueryRowContext(ctx, updateVehicle,
		arg.ID,
		arg.Model,
		arg.ImageUrl,
		arg.Capacity,
	)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.LicensePlate,
		&i.Model,
		&i.ImageUrl,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
